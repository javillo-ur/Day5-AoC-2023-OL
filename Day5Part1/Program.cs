Console.WriteLine(new List<List<string>>(){File.ReadAllLines("input.txt").ToList()}.Select(j => new Tuple<IEnumerable<int>, List<string>>(j[0].Split(":")[1].Split(" ").Where(j => int.TryParse(j, out _)).Select(j => int.Parse(j)), j.Skip(1).ToList())).Select(j => new Tuple<IEnumerable<int>, Tuple<Tuple<string,string>,IEnumerable<Tuple<string,string,string>>>>(j.Item1, j.Item2.Aggregate(new Tuple<Tuple<string,string>,IEnumerable<Tuple<string, string, string>>>(new(null, null), new List<Tuple<string,string,string>>()), (previous, current) => string.IsNullOrEmpty(current) ? previous : (current.Contains("map") ? new(new(current.Split(" ")[0].Split("-")[0], current.Split(" ")[0].Split("-")[2]), previous.Item2) : new(previous.Item1, previous.Item2.Append(new Tuple<string,string,string>(previous.Item1.Item1, previous.Item1.Item2, current))))))).Select(j => new{seeds = j.Item1, dict = j.Item2.Item2.Select(j => new Tuple<string,string,long,long,long>(j.Item1, j.Item2, long.Parse(j.Item3.TrimStart().Split(" ")[0]), long.Parse(j.Item3.TrimStart().Split(" ")[1]), long.Parse(j.Item3.TrimStart().Split(" ")[2]))), categories = j.Item2.Item2.Select(j => j.Item2).Distinct()}).Select(j => j.seeds.Select(seed => j.categories.Aggregate(new List<Tuple<string,long>>(){new ("seed", seed)} as IEnumerable<Tuple<string,long>>, (previous, current) => previous.Append(new(current, j.dict.Where(r => r.Item2 == current).Where(r => r.Item4 <= previous.First(t => t.Item1 == r.Item1).Item2 && r.Item4 + r.Item5 > previous.First(t => t.Item1 == r.Item1).Item2).Select(w => previous.Where(j => j.Item1 == w.Item1).First().Item2 - w.Item4 + w.Item3).FirstOrDefault(t => true, previous.Last().Item2)))))).First().Min(j => j.Where(r => r.Item1 == "location").Min(r => r.Item2)));