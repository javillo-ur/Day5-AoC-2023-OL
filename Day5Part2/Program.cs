Console.WriteLine(new List<List<string>>(){File.ReadAllLines("input.txt").ToList()}.Select(j => new Tuple<IEnumerable<Tuple<long,long>>, List<string>>(j[0].Split(":")[1].Split(" ").Where(j => long.TryParse(j, out _)).Aggregate(new Tuple<IEnumerable<Tuple<long,long>>,long>(new List<Tuple<long,long>>(), -1), (previous, current) => previous.Item2 == -1 ? new(previous.Item1, long.Parse(current)) : new(previous.Item1.Append(new(previous.Item2, long.Parse(current))), -1)).Item1.ToList(), j.Skip(1).ToList())).Select(j => new Tuple<IEnumerable<Tuple<long,long>>, Tuple<Tuple<string,string>,IEnumerable<Tuple<string,string,string>>>>(j.Item1, j.Item2.Aggregate(new Tuple<Tuple<string,string>,IEnumerable<Tuple<string, string, string>>>(new(null, null), new List<Tuple<string,string,string>>()), (previous, current) => string.IsNullOrEmpty(current) ? previous :(current.Contains("map") ? new(new(current.Split(" ")[0].Split("-")[0], current.Split(" ")[0].Split("-")[2]), previous.Item2) : new(previous.Item1, previous.Item2.Append(new Tuple<string,string,string>(previous.Item1.Item1, previous.Item1.Item2, current))))))).Select(j => new{seeds = j.Item1, dict = j.Item2.Item2.Select(j => new Tuple<string,string,long,long,long>(j.Item1, j.Item2, long.Parse(j.Item3.TrimStart().Split(" ")[0]), long.Parse(j.Item3.TrimStart().Split(" ")[1]), long.Parse(j.Item3.TrimStart().Split(" ")[2]))), categories = j.Item2.Item2.Select(j => j.Item2).Distinct()}).Select(j => j.categories.Skip(0).Aggregate(j.seeds, (previous, current) => previous.SelectMany(t => new List<Tuple<IEnumerable<Tuple<long,long>>,IEnumerable<Tuple<long,long>>>>{j.dict.Where(t => t.Item2 == current).Aggregate(new Tuple<IEnumerable<Tuple<long,long>>, IEnumerable<Tuple<long,long>>>(new List<Tuple<long,long>>(), new List<Tuple<long,long>>(){t}), (previous, interval) =>(!previous.Item2.Any()) ? previous : previous.Item2.Aggregate(new Tuple<IEnumerable<Tuple<long,long>>,IEnumerable<Tuple<long,long>>>(previous.Item1.ToList(), previous.Item2.ToList()), (previous, x) => (x.Item2 == 0) ? previous : ((interval.Item4 <= x.Item1 && interval.Item4 + interval.Item5 <= x.Item1 + x.Item2 && interval.Item4 + interval.Item5 >= x.Item1) ? new(previous.Item1.Append(new(interval.Item3 + x.Item1 - interval.Item4, interval.Item4 + interval.Item5 - x.Item1)), previous.Item2.Except(new List<Tuple<long,long>>(){x}).Append(new(interval.Item4 + interval.Item5, x.Item1 + x.Item2 - interval.Item4 - interval.Item5))) : ((interval.Item4 >= x.Item1 && interval.Item4 + interval.Item5 <= x.Item1 + x.Item2) ? new(previous.Item1.Append(new(interval.Item3, interval.Item5)), previous.Item2.Except(new List<Tuple<long,long>>(){x}).Append(new(x.Item1, interval.Item4-x.Item1)).Append(new(interval.Item4 + interval.Item5, x.Item2 - interval.Item4 - interval.Item5 + x.Item1))) : ((interval.Item4 >= x.Item1 && interval.Item4 <= x.Item1 + x.Item2) ? new(previous.Item1.Append(new(interval.Item3, x.Item2 + x.Item1 - interval.Item4)), previous.Item2.Except(new List<Tuple<long,long>>(){x}).Append(new(x.Item1, interval.Item4 - x.Item1))) : ((interval.Item4 <= x.Item1 && interval.Item4 + interval.Item5 >= x.Item1 + x.Item2) ? new(previous.Item1.Append(new (x.Item1 - interval.Item4 + interval.Item3, x.Item2)), previous.Item2.Except(new List<Tuple<long,long>>(){x})) : previous))))))}.Select(j => j.Item1.Union(j.Item2).Where(x => x.Item2 > 0)).First()))).First().Min(j => j.Item1));